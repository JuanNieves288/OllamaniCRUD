//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ENF
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class JEnriquezCRUDClientesEntities : DbContext
    {
        public JEnriquezCRUDClientesEntities()
            : base("name=JEnriquezCRUDClientesEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Cadena> Cadenas { get; set; }
        public virtual DbSet<Cliente> Clientes { get; set; }
    
        public virtual ObjectResult<CadenasGetAll_Result> CadenasGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<CadenasGetAll_Result>("CadenasGetAll");
        }
    
        public virtual int ClienteAdd(Nullable<int> idCadena, string sucursal, Nullable<System.DateTime> inicioContrato, Nullable<bool> activo, Nullable<System.DateTime> fechaActualizacion, byte[] imagen, Nullable<int> no_Cliente)
        {
            var idCadenaParameter = idCadena.HasValue ?
                new ObjectParameter("IdCadena", idCadena) :
                new ObjectParameter("IdCadena", typeof(int));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            var inicioContratoParameter = inicioContrato.HasValue ?
                new ObjectParameter("InicioContrato", inicioContrato) :
                new ObjectParameter("InicioContrato", typeof(System.DateTime));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var fechaActualizacionParameter = fechaActualizacion.HasValue ?
                new ObjectParameter("FechaActualizacion", fechaActualizacion) :
                new ObjectParameter("FechaActualizacion", typeof(System.DateTime));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(byte[]));
    
            var no_ClienteParameter = no_Cliente.HasValue ?
                new ObjectParameter("No_Cliente", no_Cliente) :
                new ObjectParameter("No_Cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClienteAdd", idCadenaParameter, sucursalParameter, inicioContratoParameter, activoParameter, fechaActualizacionParameter, imagenParameter, no_ClienteParameter);
        }
    
        public virtual int ClienteDelete(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClienteDelete", idClienteParameter);
        }
    
        public virtual ObjectResult<ClienteGetAll_Result1> ClienteGetAll()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClienteGetAll_Result1>("ClienteGetAll");
        }
    
        public virtual ObjectResult<ClienteGetById_Result> ClienteGetById(Nullable<int> idCliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ClienteGetById_Result>("ClienteGetById", idClienteParameter);
        }
    
        public virtual int ClienteUpdate(Nullable<int> idCliente, Nullable<int> idCadena, string sucursal, Nullable<System.DateTime> inicioContrato, Nullable<bool> activo, Nullable<System.DateTime> fechaActualizacion, byte[] imagen, Nullable<int> no_Cliente)
        {
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            var idCadenaParameter = idCadena.HasValue ?
                new ObjectParameter("IdCadena", idCadena) :
                new ObjectParameter("IdCadena", typeof(int));
    
            var sucursalParameter = sucursal != null ?
                new ObjectParameter("Sucursal", sucursal) :
                new ObjectParameter("Sucursal", typeof(string));
    
            var inicioContratoParameter = inicioContrato.HasValue ?
                new ObjectParameter("InicioContrato", inicioContrato) :
                new ObjectParameter("InicioContrato", typeof(System.DateTime));
    
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var fechaActualizacionParameter = fechaActualizacion.HasValue ?
                new ObjectParameter("FechaActualizacion", fechaActualizacion) :
                new ObjectParameter("FechaActualizacion", typeof(System.DateTime));
    
            var imagenParameter = imagen != null ?
                new ObjectParameter("Imagen", imagen) :
                new ObjectParameter("Imagen", typeof(byte[]));
    
            var no_ClienteParameter = no_Cliente.HasValue ?
                new ObjectParameter("No_Cliente", no_Cliente) :
                new ObjectParameter("No_Cliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClienteUpdate", idClienteParameter, idCadenaParameter, sucursalParameter, inicioContratoParameter, activoParameter, fechaActualizacionParameter, imagenParameter, no_ClienteParameter);
        }
    
        public virtual int ClienteChangeStatus(Nullable<bool> activo, Nullable<int> idCliente)
        {
            var activoParameter = activo.HasValue ?
                new ObjectParameter("Activo", activo) :
                new ObjectParameter("Activo", typeof(bool));
    
            var idClienteParameter = idCliente.HasValue ?
                new ObjectParameter("IdCliente", idCliente) :
                new ObjectParameter("IdCliente", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("ClienteChangeStatus", activoParameter, idClienteParameter);
        }
    }
}
